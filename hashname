#!/usr/bin/env python3

import hashlib
import sys
import os
import os.path

def help():
	print('hashname [-h|--help] [-q|--quiet] [-s|--safe] [--md5|--sha1|--sha224|--sha256|--sha384|--sha512] files')
	print('hashname [-h|--help] [-q|--quiet] [-s|--safe] [--md5|--sha1|--sha224|--sha256|--sha384|--sha512] -- files')

argv = sys.argv
if len(argv) <= 1:
	help()
	sys.exit()

if '-h' in argv or '--help' in argv:
	help()
	sys.exit()

def seperate(str):
	dir = str.split('/')
	name = dir[len(dir) - 1]
	del dir[len(dir) - 1]

	dir = '/'.join(dir) + '/'

	parts = name.split('.')
	if len(parts) == 1:
		return {'root' : name, 'ext' : '', 'dir' : dir}

	ext = parts[len(parts) - 1]
	del parts[len(parts) - 1]

	root = parts[0]
	del parts[0]
	for part in parts:
		root += '.' + part
	return {'root' : root, 'ext' : ext, 'dir' : dir}

def name(hashname, sep):
	if '' == sep['ext']:
		return hashname
	return hashname + '.' + sep['ext']

quiet = False
safe = False
defined_hash = False
hash_func = hashlib.sha1
del argv[0]

def check_hash():
	global defined_hash
	if defined_hash:
		print("Multiple hash functions defined")
		sys.exit()
	else:
		defined_hash = True

files = []

file_only = False

for arg in argv:
	if file_only:
		files.append(arg)
		continue
	
	if arg == '--sha1':
		check_hash()
		hash_func = hashlib.sha1
	elif arg == '--md5':
		check_hash()
		hash_func = hashlib.md5
	elif arg == '--sha224':
		check_hash()
		hash_func = hashlib.sha224
	elif arg == '--sha256':
		check_hash()
		hash_func = hashlib.sha256
	elif arg == '--sha384':
		check_hash()
		hash_func = hashlib.sha384
	elif arg == '--sha512':
		check_hash()
		hash_func = hashlib.sha512
	elif arg == '--':
		file_only = True
	elif arg == '-q' or arg == '--quiet':
		quiet = True
	elif arg == '-s' or arg == '--safe':
		safe = True
	else:
		files.append(arg)

for file_name in files:
	if os.path.isfile(file_name):
		f = open(file_name, 'rb')
		hashname = hash_func(f.read()).hexdigest()
		sep = seperate(file_name)
		if os.path.isfile(sep['dir'] + name(hashname, sep)):
			# Already renamed, delete if different name 
			if hashname != sep['root'] and not safe:
				if not quiet:
					print("Removing %s" % file_name)
				os.remove(file_name)
		else:
			if not quiet:
				print(file_name + ' -> ' + sep['dir'] + name(hashname, sep))
			os.rename(file_name, sep['dir'] + name(hashname, sep))
	else:
		print("%s is not a file" % (file_name))

